import telebot
from telebot import types
from collections import deque
from dataclasses import dataclass
import os
from io import BytesIO
from sys import argv
from param import token, check_name
import pandas as pd
import time

backup_id = 5677083753

try:
    df = pd.read_csv("data.csv", index_col=False)
    df.to_csv("data.csv", index=False)
except:
    df = pd.DataFrame([{"id": 823859678, "step": 0, "name": "arduinoev3", "first": "üé©–ò–≥–æ—Ä—å", "last": "–§–ë–í–æ–¢ –ü–æ–≤–µ–∑–ª–æ", "premium": True, "summa": 0, "email": "v2072211@yandex.ru"}])
bot = telebot.TeleBot(token)

def backup():
    global backup_id
    df.to_csv("data.csv", index=False)
    f = open("data.csv","rb")
    bot.send_document(backup_id, f)

def logs(s):
    print(s)
    bot.send_message(-1002079028053, s)

@bot.message_handler(commands=['start'])
def start_message(message):
    global df

    backup()
    logs(f"#1 {message.from_user.username} {message.from_user.id} {message.from_user.first_name} {message.from_user.last_name} {message.from_user.is_premium}")

    if message.chat.id in list(df.id):
        df.loc[df[df.id == message.chat.id].index[0], "step"] = 0
    else:
        prem = True if message.from_user.is_premium == "True" else False
        df_for_add = pd.DataFrame([{"id": message.chat.id, "step": 0, "name": message.from_user.username, "first": message.from_user.first_name, "last": message.from_user.last_name, "premium": prem, "summa": 0, "email": None}])
        df = df._append(df_for_add, ignore_index = True)
    
    markup = types.ReplyKeyboardMarkup()
    inning = types.KeyboardButton("–í—Å—Ç—É–ø–∏–ª")
    markup.add(inning)

    bot.send_message(message.chat.id, f"""–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ—Å—Ç–≤–æ –ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å–∫–∏–π –ö–ª–∞—Å—Å 2.0 –æ—Ç –†–ë–ö.\n
<a href="https://t.me/biz_rbc_chat">–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –æ—Å—Ç–∞–ª—å–Ω—ã–º –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è–º –≤ Telegram-—á–∞—Ç–µ</a>:\n
- –ü–æ–ª—É—á–∞–π —Ü–µ–Ω–Ω—ã–µ –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –æ—Ç –æ–ø—ã—Ç–Ω—ã—Ö –±–∏–∑–Ω–µ—Å–º–µ–Ω–æ–≤.
- –û–±—Å—É–∂–¥–∞–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, –∏–Ω—Å–∞–π—Ç—ã –∏ –¥–µ–ª–∏—Å—å –æ–ø—ã—Ç–æ–º.
- –ë—É–¥—å –≤ –∫—Ä—É–≥—É –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤ –∏ –∑–∞–≤–æ–¥–∏ –ø–æ–ª–µ–∑–Ω—ã–µ —Å–≤—è–∑–∏.\n
<b>–°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ:</b> <a href="https://t.me/biz_rbc_chat">https://t.me/biz_rbc_chat</a>""", 
                     disable_web_page_preview=True, parse_mode="HTML", reply_markup=markup)
    time.sleep(0.3)

def write_question(message, q, ans):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(*[types.KeyboardButton(i) for i in ans])

    bot.send_message(message.chat.id, q, reply_markup=markup, parse_mode="HTML")

@bot.message_handler()
def start_message(message):
    global df, N
    count = 0
    if message.text == "/jVGa4xX3":
        for i in range(1019 + 1, len(df)):
            if df.name[i] in {"katkolodeznikova", "tanya_markevich"}:
                continue
            try:
                bot.send_message(df.id[i], """""", parse_mode="HTML", disable_web_page_preview=True)
                count += 1
                logs(f"send {df.id[i]} {count}")
                time.sleep(0.2)
            except:
                pass
    elif message.chat.id in list(df.id):
        match df[df.id == message.chat.id].step.item():
            case 0:
                try:
                    
                    member = bot.get_chat_member("@" + check_name, message.chat.id)
                    if member.status == 'member' or member.status == 'creator':
                        bot.send_message(message.chat.id, """–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –Ω–∞ –≤—Å—Ç—Ä–µ—á—É —Å –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è–º–∏ 03.03 –≤ —Ñ–æ—Ä–º–∞—Ç–µ Business Talk.\n
üí°–û–ø—ã—Ç–Ω—ã–µ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–∏ –ø–æ–¥–µ–ª—è—Ç—Å—è —Å–≤–æ–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–∑–≤–∏—Ç–∏—è –±–∏–∑–Ω–µ—Å–∞ –∏ –æ—Ç–≤–µ—Ç—è—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.\n
üí∞–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à–∞–Ω—Å –ø—Ä–∏–∫–æ—Å–Ω—É—Ç—å—Å—è –∫ –æ–ø—ã—Ç—É –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤ –∏ –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã.\n
–î–ª—è —É—á–∞—Å—Ç–∏—è –Ω–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å–≤–æ–π email.""", parse_mode="HTML", reply_markup=types.ReplyKeyboardRemove())
                        df.loc[df[df.id == message.chat.id].index[0], "step"] += 1
                    else:
                        bot.reply_to(message, f'–í—ã –Ω–µ —Å –Ω–∞–º–∏, –∑–∞–ª–µ—Ç–∞–π—Ç–µ https://t.me/{check_name}')
                except Exception as e:
                    logs(str(e))
            case 1:
                if "@" in message.text:
                    bot.reply_to(message, f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –æ—Ç–∫—Ä—ã—Ç—ã–π –¥–∏–∞–ª–æ–≥ 3 –º–∞—Ä—Ç–∞! –î–æ–±–∞–≤—å—Ç–µ 03.03 –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å. –ñ–¥—ë–º –≤–∞—Å –≤ –¶–µ–Ω—Ç—Ä–µ –°–æ–±—ã—Ç–∏–π –†–ë–ö!")
                    bot.send_message(message.chat.id, """30 –º–∞—Ä—Ç–∞ –º—ã –æ—Ä–≥–∞–Ω–∏–∑—É–µ–º –±–æ–ª—å—à—É—é –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é ¬´–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å–∫–∏–π –ö–ª–∞—Å 2.0¬ª. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ —á–∞—Ç–µ! 

Ô∏è–û–ø—ã—Ç–Ω—ã–µ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–∏ –ø–æ–≥–æ–≤–æ—Ä—è—Ç –ø—Ä–æ:

‚ûñ –ü—Ä–æ–≥–Ω–æ–∑ —Ä—ã–Ω–∫–∞ –Ω–∞ 2024 –≥–æ–¥: –∫–∞–∫ —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç —Ä—ã–Ω–æ–∫?
‚ûñ –ö–æ–≥–¥–∞ –ª–∏—á–Ω—ã–π –±—Ä–µ–Ω–¥ –ø–æ–º–æ–≥–∞–µ—Ç, –∞ –∫–æ–≥–¥–∞ –º–µ—à–∞–µ—Ç –±–∏–∑–Ω–µ—Å—É?
‚ûñ –ö–∞–∫ –≤—ã–π—Ç–∏ –Ω–∞ –ú–æ—Å–±–∏—Ä–∂—É –∏ –ø—Ä–∏–≤–ª–µ—á—å –º–∏–ª–ª–∏–∞—Ä–¥—ã? 
‚ûñ –£ —Ç–µ–±—è –µ—Å—Ç—å 1 –º–ª—Ä–¥. –ß—Ç–æ –¥–∞–ª—å—à–µ?
‚ûñ –ö–∞–∫ —Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –±—Ä–µ–Ω–¥–∏–Ω–≥ –ø–æ–¥ –∑—É–º–µ—Ä–æ–≤?
‚ûñ –ö–∞–∫ –≤—ã–π—Ç–∏ —Å —Ä—É—Å—Å–∫–∏–º –ø—Ä–æ–¥—É–∫—Ç–æ–º –Ω–∞ Amazon?
‚Äã‚Äã‚ûñ –î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫—Ç–∏–≤–æ–≤: –∫—É–¥–∞ –≤–∫–ª–∞–¥—ã–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏?
‚ûñ –ö–∞–∫ –Ω–∞—Ö–æ–¥–∏—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞?
‚ûñ –°–≤—è–∑—å –º–µ–∂–¥—É –±–∏–∑–Ω–µ—Å–æ–º –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º?
‚ûñ –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –¢–µ–ª–µ–≥—Ä–∞–º–µ?

–ü–æ—Å—Ç—Ä–æ–π —Å–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –±–∏–∑–Ω–µ—Å ‚Äî <a href="https://businessclass.rbc.ru/"><b>—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –Ω–∞ –±–æ–ª—å—à—É—é –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π!</b></a>

–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ —á–∞—Ç–µ!""", parse_mode="HTML")
                    
                    df.loc[df[df.id == message.chat.id].index[0], "email"] = message.text
                    backup()

                    df.loc[df[df.id == message.chat.id].index[0], "step"] += 1
                else:
                    bot.send_message(message.chat.id, "–ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ—á—Ç—É –µ—â–µ —Ä–∞–∑")
            case _:
                bot.send_message(message.chat.id, "–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ /start")
    else:
        bot.send_message(message.chat.id, "–¢—ã –Ω–µ –≤ –∏–≥—Ä–µ - –∂–º–∏ /start")



bot.polling(none_stop=True)