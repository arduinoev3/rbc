import telebot
from telebot import types
from collections import deque
from dataclasses import dataclass
import os
from io import BytesIO
from sys import argv
from param import token, check_name
import pandas as pd
import time

backup_id = 5677083753

try:
    df = pd.read_csv("data.csv", index_col=False)
    df.to_csv("data.csv", index=False)
except:
    df = pd.DataFrame([{"id": 823859678, "step": 0, "name": "arduinoev3", "first": "üé©–ò–≥–æ—Ä—å", "last": "–§–ë–í–æ–¢ –ü–æ–≤–µ–∑–ª–æ", "premium": True, "summa": 0, "email": "v2072211@yandex.ru"}])
bot = telebot.TeleBot(token)

def backup():
    global backup_id
    df.to_csv("data.csv", index=False)
    f = open("data.csv","rb")
    bot.send_document(backup_id, f)

def logs(s):
    print(s)
    bot.send_message(-1002079028053, s)

@bot.message_handler(commands=['start'])
def start_message(message):
    global df

    backup()
    logs(f"#1 {message.from_user.username} {message.from_user.id} {message.from_user.first_name} {message.from_user.last_name} {message.from_user.is_premium}")

    if message.chat.id in list(df.id):
        df.loc[df[df.id == message.chat.id].index[0], "step"] = 0
    else:
        prem = True if message.from_user.is_premium == "True" else False
        df_for_add = pd.DataFrame([{"id": message.chat.id, "step": 0, "name": message.from_user.username, "first": message.from_user.first_name, "last": message.from_user.last_name, "premium": prem, "summa": 0, "email": None}])
        df = df._append(df_for_add, ignore_index = True)

    bot.send_message(message.chat.id, f"""–ü—Ä–∏–≤–µ—Ç!\n
–ú—ã ‚Äî –∫–æ–º–∞–Ω–¥–∞ –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ <a href="https://businessclass.rbc.ru">–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–ª–∞—Å—Å 2.0</a>, –ø–ª–æ—â–∞–¥–∫b, –≥–¥–µ –æ–ø—ã—Ç–Ω—ã–µ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–∏ –¥–µ–ª—è—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–µ–π—Å–∞–º–∏, —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏ –∏ –∏–Ω—Å–∞–π—Ç–∞–º–∏, –∞ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∑–∞–¥–∞—é—Ç –∏–º –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Å—É–∂–¥–∞—é—Ç –ø—Ä–æ–±–ª–µ–º—ã –∏ –≤—ã–∑–æ–≤—ã –≤ —Å–≤–æ–µ–º –±–∏–∑–Ω–µ—Å–µ.\n
–•–æ—Ç–∏–º –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Ç–µ–±—è –Ω–∞ –ë–ï–°–ü–õ–ê–¢–ù–û–ï –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ Business Talk - —ç—Ç–æ –æ—Ç–∫—Ä—ã—Ç—ã–π –¥–∏–∞–ª–æ–≥ —Å –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è–º–∏ –Ω–∞ —Ç–µ–º—É ‚Äú–°—Ç—Ä–æ–∏–º –ø–ª–∞–Ω—ã –Ω–∞ –≥–æ–¥: –∫–∞–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –∏ –∫–æ–≥–¥–∞ –æ—Ç—Ö–æ–¥–∏—Ç—å –æ—Ç –ø–ª–∞–Ω–∞?‚Äù. –û–±—Å—É–¥–∏–º:\n
1) –ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å?
2) –ö–∞–∫ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—é —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å—é?
3) –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–π –∏ –∑–∞–¥–∞—á –Ω–∞ –≥–æ–¥. –ù–∞ —á—Ç–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –≤ 2024 –≥–æ–¥—É?
4) –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å –±–∏–∑–Ω–µ—Å–∞: –∫–∞–∫ –≤–Ω–µ–¥—Ä–∏—Ç—å –µ–µ –≤ –∂–∏–∑–Ω—å?
5) –†–µ–∞–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å: –∫–∞–∫ –∏ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ—Ç—Ö–æ–¥–∏—Ç—å –æ—Ç –ø–ª–∞–Ω–∞ –≤ –±–∏–∑–Ω–µ—Å–µ?

–î–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ –Ω–∞—à —á–∞—Ç –≤–≤–µ–¥–∏ –ø–æ—á—Ç—É;""", 
                     disable_web_page_preview=True, parse_mode="HTML", reply_markup=types.ReplyKeyboardRemove())
    time.sleep(0.3)

def write_question(message, q, ans):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(*[types.KeyboardButton(i) for i in ans])

    bot.send_message(message.chat.id, q, reply_markup=markup, parse_mode="HTML")

@bot.message_handler()
def start_message(message):
    global df, N
    count = 0
    if message.text == "/jVGa4xX3":
        for i in range(1019 + 1, len(df)):
            if df.name[i] in {"katkolodeznikova", "tanya_markevich"}:
                continue
            try:
                bot.send_message(df.id[i], """""", parse_mode="HTML", disable_web_page_preview=True)
                count += 1
                logs(f"send {df.id[i]} {count}")
                time.sleep(0.2)
            except:
                pass
    elif message.chat.id in list(df.id):
        match df[df.id == message.chat.id].step.item():
            case 0:
                if "@" in message.text:
                    bot.send_message(message.chat.id, f"–ê —Ç–µ–ø–µ—Ä—å —Ç–µ–ª–µ—Ñ–æ–Ω")
                    
                    df.loc[df[df.id == message.chat.id].index[0], "email"] = message.text
                    backup()

                    df.loc[df[df.id == message.chat.id].index[0], "step"] += 1
                else:
                    bot.send_message(message.chat.id, "–ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ—á—Ç—É –µ—â–µ —Ä–∞–∑")
            case 1:
                num = list(filter(lambda x: x in set(map(str, range(0, 10))), message.text))
                number = "".join(num)
                if 10 <= len(number) <= 11:
                    markup = types.ReplyKeyboardMarkup()
                    inning = types.KeyboardButton("–í—Å—Ç—É–ø–∏–ª")
                    markup.add(inning)
                    bot.send_message(message.chat.id, f"–ò —Ç–µ–ø–µ—Ä—å –≥—Ä—É–ø–ø–∞ https://t.me/{check_name}", reply_markup=markup)
                    
                    df.loc[df[df.id == message.chat.id].index[0], "summa"] = int(number)
                    backup()

                    df.loc[df[df.id == message.chat.id].index[0], "step"] += 1
                else:
                    bot.send_message(message.chat.id, "–ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ—á—Ç—É –µ—â–µ —Ä–∞–∑")
            case 2:
                try:
                    member = bot.get_chat_member("@" + check_name, message.chat.id)
                    if member.status == 'member' or member.status == 'creator':

                        bot.reply_to(message, """–ö—Ä—É—Ç–æ! –ï—â–µ —Ä–∞–∑ –Ω–∞–ø–æ–º–Ω—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ <a href="https://businessclass.rbc.ru">–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–ª–∞—Å—Å 2.0</a>""", parse_mode="HTML", reply_markup=types.ReplyKeyboardRemove())

                        df.loc[df[df.id == message.chat.id].index[0], "step"] += 1
                    else:
                        bot.reply_to(message, f'–í—ã –Ω–µ —Å –Ω–∞–º–∏, –∑–∞–ª–µ—Ç–∞–π—Ç–µ https://t.me/{check_name}')
                except Exception as e:
                    logs(str(e))
            case _:
                bot.send_message(message.chat.id, "–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ /start")
    else:
        bot.send_message(message.chat.id, "–¢—ã –Ω–µ –≤ –∏–≥—Ä–µ - –∂–º–∏ /start")



bot.polling(none_stop=True)