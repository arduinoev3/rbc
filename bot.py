import telebot
from telebot import types
from collections import deque
from dataclasses import dataclass
import os
from io import BytesIO
from sys import argv
from param import token, check_name
import pandas as pd

backup_id = 5677083753

try:
    df = pd.read_csv("data.csv", index_col=False)
    df.to_csv("data.csv", index=False)
except:
    df = pd.DataFrame([{"id": [823859678], "step": [0], "name": ["arduinoev3"], "first": ["üé©–ò–≥–æ—Ä—å"], "last": ["–§–ë–í–æ–¢ –ü–æ–≤–µ–∑–ª–æ"], "premium": [True], "summa": [0], "email": ["v2072211@yandex.ru"]},
                    {"id": 5677083753, "step": 0, "name": "bssmipt_faq", "first": "–°—Ç—É–¥—Å–æ–≤–µ—Ç –§–ë–í–¢", "last": "–û–±—â–∏–π –∞–∫–∫–∞—É–Ω—Ç", "premium": False, "summa": 0, "email": "@", }])

bot=telebot.TeleBot(token)

def backup():
    global backup_id
    df.to_csv("data.csv", index=False)
    f = open("data.csv","rb")
    bot.send_document(backup_id, f)

def logs(s):
    print(s)
    bot.send_message(-1002079028053, s)

@bot.message_handler(commands=['start'])
def start_message(message):
    global df
    backup()
    logs(f"#1 {message.from_user.username} {message.from_user.id} {message.from_user.first_name} {message.from_user.last_name} {message.from_user.is_premium}")

    if message.chat.id in list(df.id):
        logs(f"search {message.from_user.username} {message.from_user.id} {message.from_user.first_name} {message.from_user.last_name} {message.from_user.is_premium}")
        df.loc[df[df.id == message.chat.id].index[0], "step"] = 0
        df.loc[df[df.id == message.chat.id].index[0], "summa"] = 0
        logs("good search")
    else:
        prem = True if message.from_user.is_premium == "True" else False
        df_for_add = pd.DataFrame([{"id": message.chat.id, "step": 0, "name": message.from_user.username, "first": message.from_user.first_name, "last": message.from_user.last_name, "premium": prem, "summa": 0, "email": None}])
        df = df._append(df_for_add, ignore_index = True)
        
    markup = types.ReplyKeyboardMarkup()
    test = types.KeyboardButton("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")
    markup.add(test)

    bot.send_message(message.chat.id, f"""–ü—Ä–∏–≤–µ—Ç!\n
–ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –∏ –¥–Ω–µ–≤–Ω–∏–∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –≤–∞—Å –∏ –≤–∞—à–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞.\n
–ú—ã ‚Äî –∫–æ–º–∞–Ω–¥–∞ –õ–µ–∫—Ç–æ—Ä–∏—è <a href="https://publictalk.rbc.ru/?utm_source=tg_bot&utm_medium=welcome">¬´–î–µ—Ç–∏ –≤ –¥–µ–ª–µ¬ª –†–ë–ö</a>, —Å–µ–º–µ–π–Ω–æ–≥–æ –ª–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏—è, —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ.\n
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –∏ –¥–Ω–µ–≤–Ω–∏–∫, –ø—Ä–æ–π–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç –∏ —É–∑–Ω–∞–π—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏""", 
                     disable_web_page_preview=True, reply_to_message_id=None, reply_markup=markup, parse_mode="HTML", disable_notification=None)

def write_question(message, q, ans):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(*[types.KeyboardButton(i) for i in ans])

    bot.send_message(message.chat.id, q, reply_markup=markup, parse_mode="HTML")

@bot.message_handler()
def start_message(message):
    global df
    if message.chat.id in list(df.id):
        match df[df.id == message.chat.id].step.item():
            case 0:
                write_question(message, """–ö–∞–∫ –≤–∞–º –∫–∞–∂–µ—Ç—Å—è, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ —Ä–∞–∑–≤–∏—Ç—ã —É –≤–∞—Å –∏ –≤–∞—à–∏—Ö –¥–µ—Ç–µ–π –≥–∏–±–∫–∏–µ –Ω–∞–≤—ã–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏? –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∏—Ö:\n<b>1. –ü–æ–ª—É—á–∞–µ—Ç—Å—è –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å—Å—è –æ —Ä–∞–∑–º–µ—Ä–µ –∫–∞—Ä–º–∞–Ω–Ω—ã—Ö –¥–µ–Ω–µ–≥?</b>""", 
                           ["1. –ø–æ–ª—É—á–∞–µ—Ç—Å—è –±–µ–∑ –ø—Ä–æ–±–ª–µ–º", 
                            "2. —Å–Ω–∞—á–∞–ª–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ–º, –Ω–æ –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞–µ–º—Å—è", 
                            "3. –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–≥–æ–≤–æ—Ä–∏–º—Å—è"])
                df.loc[df[df.id == message.chat.id].index[0], "step"] += 1
            case 1:
                if message.text[0] in ["1", "2", "3"]:
                    df.loc[df[df.id == message.chat.id].index[0], "summa"] += 4 - int(message.text[0])
                    write_question(message, """<b>2. –ü–æ–ª—É—á–∞–µ—Ç—Å—è –¥–æ—Å—Ç–æ–π–Ω–æ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä—É–¥–∞?</b>""", 
                            ["1. –ø–æ–ª—É—á–∞–µ—Ç—Å—è –±–µ–∑ –ø—Ä–æ–±–ª–µ–º", 
                                "2. —Å–Ω–∞—á–∞–ª–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ–º, –Ω–æ –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞–µ–º—Å—è", 
                                "3. –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–≥–æ–≤–æ—Ä–∏–º—Å—è"])
                    df.loc[df[df.id == message.chat.id].index[0], "step"] += 1
                else:
                    bot.reply_to(message, f'–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏')
            case 2:
                if message.text[0] in ["1", "2", "3"]:
                    df.loc[df[df.id == message.chat.id].index[0], "summa"] += 4 - int(message.text[0])
                    write_question(message, """<b>3. –ú–æ–∂–µ—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤ –∏ –Ω–µ –ø–æ–ø–∞—Å—Ç—å—Å—è –Ω–∞ —É–¥–æ—á–∫—É?</b>""", 
                            ["1. –ø–æ–ª—É—á–∞–µ—Ç—Å—è –±–µ–∑ –ø—Ä–æ–±–ª–µ–º",
                                "2. –Ω–µ –≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç—Å—è",
                                "3. –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è"])
                    df.loc[df[df.id == message.chat.id].index[0], "step"] += 1
                else:
                    bot.reply_to(message, f'–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏')
            case 3:
                if message.text[0] in ["1", "2", "3"]:
                    df.loc[df[df.id == message.chat.id].index[0], "summa"] += 4 - int(message.text[0])
                    write_question(message, """<b>4. –£–º–µ–µ—Ç–µ —Å—Ç–∞–≤–∏—Ç—å –∏ –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏?</b>""", 
                            ["1. –ø–æ–ª—É—á–∞–µ—Ç—Å—è –±–µ–∑ –ø—Ä–æ–±–ª–µ–º", 
                                "2. —Å–Ω–∞—á–∞–ª–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ–º, –Ω–æ –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞–µ–º—Å—è", 
                                "3. –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–≥–æ–≤–æ—Ä–∏–º—Å—è"])
                    df.loc[df[df.id == message.chat.id].index[0], "step"] += 1
                else:
                    bot.reply_to(message, f'–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏')
            case 4:
                if message.text[0] in ["1", "2", "3"]:
                    df.loc[df[df.id == message.chat.id].index[0], "summa"] += 4 - int(message.text[0])
                    write_question(message, """<b>5. –ü–æ–ª—É—á–∞–µ—Ç—Å—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–µ –≤—Ä–µ–º—è –∏ –¥–µ–Ω—å–≥–∏ –Ω–∞ –±—É–¥—É—â–µ–µ?</b>""", 
                            ["1. –ø–æ–ª—É—á–∞–µ—Ç—Å—è –±–µ–∑ –ø—Ä–æ–±–ª–µ–º", 
                                "2. —Å–Ω–∞—á–∞–ª–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ–º, –Ω–æ –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞–µ–º—Å—è", 
                                "3. –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–≥–æ–≤–æ—Ä–∏–º—Å—è"])
                    df.loc[df[df.id == message.chat.id].index[0], "step"] += 1
                else:
                    bot.reply_to(message, f'–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏')
            case 5:
                if message.text[0] in ["1", "2", "3"]:
                    df.loc[df[df.id == message.chat.id].index[0], "summa"] += 4 - int(message.text[0])
                    markup = types.InlineKeyboardMarkup()
                    url = types.InlineKeyboardButton("–ì—Ä—É–ø–ø–∞", url='https://t.me/{check_name}')
                    markup.add(url)
            
                    bot.send_message(message.chat.id, """–ì–æ—Ç–æ–≤–æ!
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –¥–Ω–µ–≤–Ω–∏–∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏:
1. –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É, –Ω–∞ –Ω–µ—ë –æ—Ç–ø—Ä–∞–≤–∏–º –¥–Ω–µ–≤–Ω–∏–∫ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
2. –í—Å—Ç—É–ø–∏—Ç–µ –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É """ + f"https://t.me/{check_name}", reply_markup=types.ReplyKeyboardRemove())
                    
                    df.loc[df[df.id == message.chat.id].index[0], "step"] += 1
                else:
                    bot.reply_to(message, f'–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏')
            case 6:
                if "@" in message.text:
                    markup = types.ReplyKeyboardMarkup()
                    inning = types.KeyboardButton("–í—Å—Ç—É–ø–∏–ª")
                    markup.add(inning)
                    bot.send_message(message.chat.id, "–ê —Ç–µ–ø–µ—Ä—å –≥—Ä—É–ø–ø–∞", reply_markup=markup)

                    backup()
                    s = df.loc[df[df.id == message.chat.id].index[0], "summa"]
                    logs(f"#2 {message.from_user.username} {message.text} {s}")

                    df.loc[df[df.id == message.chat.id].index[0], "step"] += 1
                else:
                    bot.send_message(message.chat.id, "–ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ—á—Ç—É –µ—â–µ —Ä–∞–∑")
            case 7:
                try:
                    member = bot.get_chat_member("@" + check_name, message.chat.id)
                    if member.status == 'member' or member.status == 'creator':
                        markup = types.ReplyKeyboardMarkup()
                        test = types.KeyboardButton("/start")
                        markup.add(test)
                        bot.reply_to(message, '–í—ã —Å –Ω–∞–º–∏, –∫–∏–¥–∞—é –¥–Ω–µ–≤–Ω–∏–∫ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', reply_markup=markup)

                        f = open("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –¥–Ω–µ–≤–Ω–∏–∫.pdf","rb")
                        bot.send_document(message.chat.id,f)

                        s = df.loc[df[df.id == message.chat.id].index[0], "summa"]
                        bot.send_message(message.chat.id, f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç {s} –±–∞–ª–ª–æ–≤")
                        if df.loc[df[df.id == message.chat.id].index[0], "summa"] >= 15:
                            bot.send_message(message.chat.id, f"""–ó–¥–æ—Ä–æ–≤–æ! –£ –≤–∞—Å –Ω–µ–ø–ª–æ—Ö–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å—Å—è –∏ –≤—ã –ª–µ–≥–∫–æ —Å–º–æ–∂–µ—Ç–µ –≤–Ω–µ–¥—Ä–∏—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –æ –∫–æ—Ç–æ—Ä—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç—ã –ø–æ –±–∏–∑–Ω–µ—Å—É –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Å–∫–∞–∂—É—Ç 25 –Ω–æ—è–±—Ä—è –≤ –ª–µ–∫—Ü–∏–∏ <a href="https://publictalk.rbc.ru/?utm_source=tg_bot&utm_medium=result">¬´–î–µ—Ç–∏ –≤ –¥–µ–ª–µ¬ª –æ—Ç –†–ë–ö</a>.\n
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏ –∂–¥—ë–º –≤ –≥–æ—Å—Ç–∏ —Ä–æ–¥–∏—Ç–µ–ª–µ–π –∏ –∏—Ö –±—É–¥—É—â–∏—Ö –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π!""", parse_mode="HTML")
                        elif 9 <= df.loc[df[df.id == message.chat.id].index[0], "summa"] <= 14:
                            bot.send_message(message.chat.id, f"""–ù–µ–ø–ª–æ—Ö–æ! –í—ã –¥–µ–ª–∞–µ—Ç–µ –≤–∞–∂–Ω—ã–µ —É—Å–ø–µ—Ö–∏, –æ–¥–Ω–∞–∫–æ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –∫ —á–µ–º—É —Å—Ç—Ä–µ–º–∏—Ç—å—Å—è, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ—Å–ª—É—à–∞—Ç—å –æ–ø—ã—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∑–Ω–∞—é—Ç –≤—Å—ë –æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ –∏ –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤–æ–º –±–∏–∑–Ω–µ—Å–µ.\n
    25 –Ω–æ—è–±—Ä—è –∂–¥—ë–º —Ä–æ–¥–∏—Ç–µ–ª–µ–π –∏ –∏—Ö –±—É–¥—É—â–∏—Ö –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π –Ω–∞ –ª–µ–∫—Ü–∏–∏ <a href="https://publictalk.rbc.ru/?utm_source=tg_bot&utm_medium=result">¬´–î–µ—Ç–∏ –≤ –¥–µ–ª–µ¬ª –æ—Ç –†–ë–ö</a>.\n
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏ –∂–¥—ë–º –≤ –≥–æ—Å—Ç–∏ —Ä–æ–¥–∏—Ç–µ–ª–µ–π –∏ –∏—Ö –±—É–¥—É—â–∏—Ö –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π!""", parse_mode="HTML")
                        else:
                            bot.send_message(message.chat.id, f"""–í–∞–º –µ—Å—Ç—å –∫ —á–µ–º—É —Å—Ç—Ä–µ–º–∏—Ç—å—Å—è! –í –ª—é–±–æ–º –¥–µ–ª–µ –≥–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–∞—á–∞—Ç—å. –í–∞–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å—Ç–æ–∏—Ç –ø–æ—Å–ª—É—à–∞—Ç—å –æ–ø—ã—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∑–Ω–∞—é—Ç –≤—Å—ë –æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ –∏ –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤–æ–º –±–∏–∑–Ω–µ—Å–µ. –û–±–µ—â–∞–µ–º, —á—Ç–æ –∫ –∫–æ–Ω—Ü—É –ª–µ–∫—Ü–∏–∏ –≤—ã —É–∂–µ –ø–æ—á—É–≤—Å—Ç–≤—É–µ—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.\n
    25 –Ω–æ—è–±—Ä—è –∂–¥—ë–º —Ä–æ–¥–∏—Ç–µ–ª–µ–π –∏ –∏—Ö –±—É–¥—É—â–∏—Ö –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π –Ω–∞ –ª–µ–∫—Ü–∏–∏ <a href="https://publictalk.rbc.ru/?utm_source=tg_bot&utm_medium=result">¬´–î–µ—Ç–∏ –≤ –¥–µ–ª–µ¬ª –æ—Ç –†–ë–ö</a>.\n
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏ –∂–¥—ë–º –≤ –≥–æ—Å—Ç–∏ —Ä–æ–¥–∏—Ç–µ–ª–µ–π –∏ –∏—Ö –±—É–¥—É—â–∏—Ö –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π!""", parse_mode="HTML")
                        
                        df.loc[df[df.id == message.chat.id].index[0], "step"] += 1
                    else:
                        bot.reply_to(message, f'–í—ã –Ω–µ —Å –Ω–∞–º–∏, –∑–∞–ª–µ—Ç–∞–π—Ç–µ https://t.me/{check_name}')
                except Exception as e:
                    logs(str(e))
            case _:
                bot.send_message(message.chat.id, "–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ /start")
    else:
        bot.send_message(message.chat.id, "–¢—ã –Ω–µ –≤ –∏–≥—Ä–µ - –∂–º–∏ /start")



bot.polling(none_stop=True)